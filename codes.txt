C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\config\settings.py:

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8g&kr(r)q9wk+ai$r1+#l^e&2e6ttz(g&jp!hhooo20ln0g+d!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'
LOGIN_URL = 'login'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'planner',
    'widget_tweaks',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


----------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\config\urls.py:
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('planner.urls')),  # Include app URLs
]
-------------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\templates\planner\add_category.html:


{% extends 'planner/base.html' %}

{% block title %}Add Category - Budget Planner{% endblock %}

{% block content %}
<div class="row mb-4">
    <div class="col-md-12">
        <h1 class="display-5 fw-bold">
            <i class="fas fa-tags me-2"></i> Add Category
        </h1>
        <p class="text-muted">Create a new transaction category</p>
    </div>
</div>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-body p-4">
                <form method="post" class="needs-validation" novalidate>
                    {% csrf_token %}

                    <!-- Name -->
                    <div class="mb-3">
                        <label for="{{ form.name.id_for_label }}" class="form-label">Category Name</label>
                        {{ form.name }}
                        {% if form.name.errors %}
                        <div class="invalid-feedback d-block">{{ form.name.errors }}</div>
                        {% endif %}
                    </div>

                    <!-- Icon -->
                    <div class="mb-3">
                        <label for="{{ form.icon.id_for_label }}" class="form-label">FontAwesome Icon</label>
                        {{ form.icon }}
                        <div class="form-text">e.g., <code>fa-car</code>, <code>fa-utensils</code></div>
                        {% if form.icon.errors %}
                        <div class="invalid-feedback d-block">{{ form.icon.errors }}</div>
                        {% endif %}
                    </div>

                    <!-- Color -->
                    <div class="mb-4">
                        <label for="{{ form.color.id_for_label }}" class="form-label">Color</label>
                        {{ form.color }}
                        {% if form.color.errors %}
                        <div class="invalid-feedback d-block">{{ form.color.errors }}</div>
                        {% endif %}
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-save me-1"></i> Save Category
                        </button>
                        <a href="{% url 'list_categories' %}" class="btn btn-outline-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // Bootstrap form validation
    (function () {
        'use strict';
        const forms = document.querySelectorAll('.needs-validation');
        Array.prototype.slice.call(forms).forEach(function (form) {
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        });
    })();
</script>
{% endblock %}


------------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\templates\planner\add_transaction.html:


{% extends 'planner/base.html' %}

{% block title %}Add Transaction - Budget Planner{% endblock %}

{% block content %}
<div class="row mb-4">
    <div class="col-md-12">
        <h1 class="display-5 fw-bold">
            <i class="fas fa-plus-circle me-2"></i> Add Transaction
        </h1>
        <p class="text-muted">Record a new income or expense</p>
    </div>
</div>

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card shadow-sm">
            <div class="card-body p-4">
                <form method="post" class="needs-validation" novalidate>
                    {% csrf_token %}

                    <!-- Type Field (Custom Radio Buttons) -->
                    <div class="mb-3">
                        <label class="form-label">Transaction Type</label>
                        <div class="btn-group w-100" role="group">
                            <input type="radio" class="btn-check" name="type" id="type_income" value="IN" {% if form.type.value == "IN" %}checked{% endif %}>
                            <label class="btn btn-outline-success" for="type_income">
                                <i class="fas fa-arrow-circle-up me-1"></i> Income
                            </label>

                            <input type="radio" class="btn-check" name="type" id="type_expense" value="EX" {% if form.type.value == "EX" or not form.type.value %}checked{% endif %}>
                            <label class="btn btn-outline-danger" for="type_expense">
                                <i class="fas fa-arrow-circle-down me-1"></i> Expense
                            </label>
                        </div>
                        {% if form.type.errors %}
                        <div class="invalid-feedback d-block">{{ form.type.errors }}</div>
                        {% endif %}
                    </div>

                    <!-- Category Field -->
                    <div class="mb-3">
                        <label for="{{ form.category.id_for_label }}" class="form-label">Category</label>
                        <div class="input-group">
                            {{ form.category }}
                            <a href="{% url 'add_category' %}" class="btn btn-outline-secondary">
                                <i class="fas fa-plus"></i> New
                            </a>
                        </div>
                        {% if form.category.errors %}
                        <div class="invalid-feedback d-block">{{ form.category.errors }}</div>
                        {% endif %}
                        <div class="form-text">Select a category or create a new one</div>
                    </div>

                    <!-- Amount Field -->
                    <div class="mb-3">
                        <label for="{{ form.amount.id_for_label }}" class="form-label">Amount (€)</label>
                        <div class="input-group">
                            <span class="input-group-text">€</span>
                            {{ form.amount }}
                        </div>
                        {% if form.amount.errors %}
                        <div class="invalid-feedback d-block">{{ form.amount.errors }}</div>
                        {% endif %}
                    </div>

                    <!-- Date Field -->
                    <div class="mb-3">
                        <label for="{{ form.date.id_for_label }}" class="form-label">Date</label>
                        {{ form.date }}
                        {% if form.date.errors %}
                        <div class="invalid-feedback d-block">{{ form.date.errors }}</div>
                        {% endif %}
                    </div>

                    <!-- Note Field -->
                    <div class="mb-4">
                        <label for="{{ form.note.id_for_label }}" class="form-label">Note (optional)</label>
                        {{ form.note }}
                        {% if form.note.errors %}
                        <div class="invalid-feedback d-block">{{ form.note.errors }}</div>
                        {% endif %}
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-save me-1"></i> Save Transaction
                        </button>
                        <a href="{% url 'dashboard' %}" class="btn btn-outline-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // Handle form validation
    (function () {
        'use strict';
        const forms = document.querySelectorAll('.needs-validation');
        Array.prototype.slice.call(forms).forEach(function (form) {
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        });
    })();
</script>
{% endblock %}

---------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\templates\planner\categories.html:

{% extends 'planner/base.html' %}

{% block title %}Categories - Budget Planner{% endblock %}

{% block content %}
<div class="row mb-4 align-items-center">
    <div class="col-md-8">
        <h1 class="display-5 fw-bold">
            <i class="fas fa-tags me-2"></i> Categories
        </h1>
        <p class="text-muted">Manage your transaction categories</p>
    </div>
    <div class="col-md-4 text-md-end">
        <a href="{% url 'add_category' %}" class="btn btn-primary">
            <i class="fas fa-plus-circle me-1"></i> Add New Category
        </a>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card shadow-sm">
            <div class="card-body">
                {% if categories %}
                <div class="row">
                    {% for cat in categories %}
                    <div class="col-md-4 col-sm-6 mb-3">
                        <div class="card h-100 border-0 shadow-sm">
                            <div class="card-body d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="card-title mb-0">{{ cat.name }}</h5>
                                    <p class="text-muted small mb-0">
                                        <span class="badge bg-info text-white">
                                            {{ cat.transaction_set.count }} transactions
                                        </span>
                                    </p>
                                </div>
                                <div>
                                    <button class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal{{ cat.id }}">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Delete Modal for each category -->
                    <div class="modal fade" id="deleteModal{{ cat.id }}" tabindex="-1" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Delete Category</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <p>Are you sure you want to delete <strong>{{ cat.name }}</strong>?</p>
                                    <p class="text-danger">
                                        <i class="fas fa-exclamation-triangle me-1"></i> 
                                        This will affect all transactions using this category.
                                    </p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <a href="{% url 'delete_category' cat.id %}" class="btn btn-danger">Delete</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
                {% else %}
                <div class="text-center py-5">
                    <i class="fas fa-tags fa-3x text-muted mb-3"></i>
                    <h3>No Categories Yet</h3>
                    <p class="text-muted mb-4">Start by creating categories to organize your transactions</p>
                    <a href="{% url 'add_category' %}" class="btn btn-primary">
                        <i class="fas fa-plus-circle me-1"></i> Add Your First Category
                    </a>
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}

--------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\templates\planner\dashboard.html:

{% extends 'planner/base.html' %}
{% load static %}

{% block title %}Dashboard - Budget Planner{% endblock %}

{% block content %}
<div class="row mb-4">
    <div class="col-md-12">
        <h1 class="display-5 fw-bold">
            <i class="fas fa-chart-pie me-2"></i> Budget Dashboard
        </h1>
        <p class="text-muted">Overview of your financial situation</p>
    </div>
</div>

<!-- Summary Cards -->
<div class="row mb-4">
    <div class="col-md-4 mb-3">
        <div class="card dashboard-card income-card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="card-subtitle mb-1 text-white-50">TOTAL INCOME</h6>
                        <h3 class="card-title mb-0">€{{ total_income }}</h3>
                    </div>
                    <div>
                        <i class="fas fa-arrow-circle-up fa-3x text-white-50"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-4 mb-3">
        <div class="card dashboard-card expense-card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="card-subtitle mb-1 text-white-50">TOTAL EXPENSE</h6>
                        <h3 class="card-title mb-0">€{{ total_expense }}</h3>
                    </div>
                    <div>
                        <i class="fas fa-arrow-circle-down fa-3x text-white-50"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-4 mb-3">
        <div class="card dashboard-card balance-card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h6 class="card-subtitle mb-1 text-white-50">BALANCE</h6>
                        <h3 class="card-title mb-0">€{{ balance }}</h3>
                    </div>
                    <div>
                        <i class="fas fa-wallet fa-3x text-white-50"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Charts Section -->
<div class="row mb-4">
    <!-- Expenses by Category -->
    <div class="col-md-6 mb-4">
        <div class="card shadow-sm">
            <div class="card-header bg-white">
                <h5 class="card-title mb-0">Expenses by Category</h5>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="expenseChart"></canvas>
                </div>
                {% if not data %}
                <div class="text-center mt-4 text-muted">
                    <p><i class="fas fa-info-circle me-2"></i>No expense data available</p>
                </div>
                {% endif %}
            </div>
        </div>
    </div>
    
    <!-- Income vs Expense -->
    <div class="col-md-6 mb-4">
        <div class="card shadow-sm">
            <div class="card-header bg-white">
                <h5 class="card-title mb-0">Income vs Expense</h5>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="comparisonChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Recent Transactions -->
<div class="row">
    <div class="col-md-12">
        <div class="card shadow-sm">
            <div class="card-header bg-white d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">Recent Transactions</h5>
                <a href="{% url 'list_transactions' %}" class="btn btn-sm btn-outline-primary">View All</a>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Category</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Note</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for transaction in recent_transactions %}
                            <tr class="transaction-item {% if transaction.type == 'IN' %}income{% else %}expense{% endif %}">
                                <td>{{ transaction.date }}</td>
                                <td>
                                    {% if transaction.category %}
                                    <span class="badge bg-light text-dark category-badge">{{ transaction.category.name }}</span>
                                    {% else %}
                                    <span class="badge bg-secondary category-badge">Uncategorized</span>
                                    {% endif %}
                                </td>
                                <td>
                                    {% if transaction.type == 'IN' %}
                                    <span class="badge bg-success">Income</span>
                                    {% else %}
                                    <span class="badge bg-danger">Expense</span>
                                    {% endif %}
                                </td>
                                <td class="{% if transaction.type == 'IN' %}amount-positive{% else %}amount-negative{% endif %}">
                                    {% if transaction.type == 'IN' %}+{% else %}-{% endif %}€{{ transaction.amount }}
                                </td>
                                <td>{{ transaction.note|truncatechars:30 }}</td>
                            </tr>
                            {% empty %}
                            <tr>
                                <td colspan="5" class="text-center py-3">
                                    <p class="text-muted mb-0">No transactions yet</p>
                                    <a href="{% url 'add_transaction' %}" class="btn btn-sm btn-primary mt-2">
                                        <i class="fas fa-plus me-1"></i> Add Transaction
                                    </a>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // Expense Chart
    const expenseCtx = document.getElementById('expenseChart').getContext('2d');
    const labels = {{ labels|safe }};
    const data = {{ data|safe }};
    
    new Chart(expenseCtx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: data,
                backgroundColor: [
                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
                    '#9966FF', '#FF9F40', '#32CD32', '#BA55D3',
                    '#20B2AA', '#FF6347'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'right',
                }
            }
        }
    });
    
    // Income vs Expense Chart
    const comparisonCtx = document.getElementById('comparisonChart').getContext('2d');
    new Chart(comparisonCtx, {
        type: 'bar',
        data: {
            labels: ['Income vs Expense'],
            datasets: [
                {
                    label: 'Income',
                    data: [{{ total_income }}],
                    backgroundColor: 'rgba(40, 167, 69, 0.7)',
                    borderColor: 'rgba(40, 167, 69, 1)',
                    borderWidth: 1
                },
                {
                    label: 'Expense',
                    data: [{{ total_expense }}],
                    backgroundColor: 'rgba(220, 53, 69, 0.7)',
                    borderColor: 'rgba(220, 53, 69, 1)',
                    borderWidth: 1
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>
{% endblock %}


------------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\templates\planner\transaction_list.html

{% extends 'planner/base.html' %}
{% load static %}

{% block title %}Transactions - Budget Planner{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
{% endblock %}

{% block content %}
<div class="row mb-4 align-items-center">
    <div class="col-md-6">
        <h1 class="display-5 fw-bold">
            <i class="fas fa-list me-2"></i> Transactions
        </h1>
        <p class="text-muted">View and manage all your transactions</p>
    </div>
    <div class="col-md-6 text-md-end">
        <a href="{% url 'add_transaction' %}" class="btn btn-primary">
            <i class="fas fa-plus-circle me-1"></i> Add Transaction
        </a>
    </div>
</div>

<!-- Filters -->
<div class="row mb-4">
    <div class="col-md-12">
        <div class="card shadow-sm">
            <div class="card-body">
                <form method="get" class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Transaction Type</label>
                        <select name="type" class="form-select">
                            <option value="">All Types</option>
                            <option value="IN" {% if request.GET.type == 'IN' %}selected{% endif %}>Income</option>
                            <option value="EX" {% if request.GET.type == 'EX' %}selected{% endif %}>Expense</option>
                        </select>
                    </div>
                    
                    <div class="col-md-3">
                        <label class="form-label">Category</label>
                        <select name="category" class="form-select">
                            <option value="">All Categories</option>
                            {% for category in categories %}
                            <option value="{{ category.id }}" {% if request.GET.category|stringformat:"s" == category.id|stringformat:"s" %}selected{% endif %}>
                                {{ category.name }}
                            </option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="col-md-3">
                        <label class="form-label">Date Range</label>
                        <div class="input-daterange input-group" id="datepicker">
                            <input type="text" class="form-control" name="start_date" placeholder="Start Date" 
                                   value="{{ request.GET.start_date|default:'' }}">
                            <span class="input-group-text">to</span>
                            <input type="text" class="form-control" name="end_date" placeholder="End Date"
                                   value="{{ request.GET.end_date|default:'' }}">
                        </div>
                    </div>
                    
                    <div class="col-md-3 d-flex align-items-end">
                        <div class="d-grid gap-2 w-100">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-filter me-1"></i> Filter
                            </button>
                            <a href="{% url 'list_transactions' %}" class="btn btn-outline-secondary">
                                <i class="fas fa-redo me-1"></i> Reset
                            </a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Transactions List -->
<div class="row">
    <div class="col-md-12">
        <div class="card shadow-sm">
            <div class="card-body">
                {% if transactions %}
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Category</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Note</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for transaction in transactions %}
                            <tr class="transaction-item {% if transaction.type == 'IN' %}income{% else %}expense{% endif %}">
                                <td>{{ transaction.date }}</td>
                                <td>
                                    {% if transaction.category %}
                                    <span class="badge bg-light text-dark category-badge">{{ transaction.category.name }}</span>
                                    {% else %}
                                    <span class="badge bg-secondary category-badge">Uncategorized</span>
                                    {% endif %}
                                </td>
                                <td>
                                    {% if transaction.type == 'IN' %}
                                    <span class="badge bg-success">Income</span>
                                    {% else %}
                                    <span class="badge bg-danger">Expense</span>
                                    {% endif %}
                                </td>
                                <td class="{% if transaction.type == 'IN' %}amount-positive{% else %}amount-negative{% endif %}">
                                    {% if transaction.type == 'IN' %}+{% else %}-{% endif %}€{{ transaction.amount }}
                                </td>
                                <td>{{ transaction.note|truncatechars:30 }}</td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a href="{% url 'edit_transaction' transaction.id %}" class="btn btn-outline-primary">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button type="button" class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteModal{{ transaction.id }}">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                    
                                    <!-- Delete Modal -->
                                    <div class="modal fade" id="deleteModal{{ transaction.id }}" tabindex="-1" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Delete Transaction</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <p>Are you sure you want to delete this transaction?</p>
                                                    <div class="alert alert-info">
                                                        <strong>Type:</strong> {{ transaction.get_type_display }}<br>
                                                        <strong>Amount:</strong> €{{ transaction.amount }}<br>
                                                        <strong>Date:</strong> {{ transaction.date }}<br>
                                                        <strong>Category:</strong> {{ transaction.category|default:"Uncategorized" }}
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                    <a href="{% url 'delete_transaction' transaction.id %}" class="btn btn-danger">Delete</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination -->
                {% if is_paginated %}
                <nav aria-label="Page navigation" class="mt-4">
                    <ul class="pagination justify-content-center">
                        {% if page_obj.has_previous %}
                        <li class="page-item">
                            <a class="page-link" href="?page=1{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}">
                                <i class="fas fa-angle-double-left"></i>
                            </a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="?page={{ page_obj.previous_page_number }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}">
                                <i class="fas fa-angle-left"></i>
                            </a>
                        </li>
                        {% endif %}
                        
                        {% for num in page_obj.paginator.page_range %}
                        {% if page_obj.number == num %}
                        <li class="page-item active"><span class="page-link">{{ num }}</span></li>
                        {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                        <li class="page-item">
                            <a class="page-link" href="?page={{ num }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}">{{ num }}</a>
                        </li>
                        {% endif %}
                        {% endfor %}
                        
                        {% if page_obj.has_next %}
                        <li class="page-item">
                            <a class="page-link" href="?page={{ page_obj.next_page_number }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}">
                                <i class="fas fa-angle-right"></i>
                            </a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="?page={{ page_obj.paginator.num_pages }}{% for key, value in request.GET.items %}{% if key != 'page' %}&{{ key }}={{ value }}{% endif %}{% endfor %}">
                                <i class="fas fa-angle-double-right"></i>
                            </a>
                        </li>
                        {% endif %}
                    </ul>
                </nav>
                {% endif %}
                
                {% else %}
                <div class="text-center py-5">
                    <i class="fas fa-receipt fa-3x text-muted mb-3"></i>
                    <h3>No Transactions Found</h3>
                    <p class="text-muted mb-4">
                        {% if request.GET %}
                        No transactions match your filter criteria. Try adjusting your filters.
                        {% else %}
                        Start by adding your first transaction to track your finances.
                        {% endif %}
                    </p>
                    {% if request.GET %}
                    <a href="{% url 'list_transactions' %}" class="btn btn-secondary me-2">
                        <i class="fas fa-redo me-1"></i> Reset Filters
                    </a>
                    {% endif %}
                    <a href="{% url 'add_transaction' %}" class="btn btn-primary">
                        <i class="fas fa-plus-circle me-1"></i> Add Transaction
                    </a>
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
<script>
    $(function () {
        // Initialize datepicker
        $('.input-daterange').datepicker({
            format: 'yyyy-mm-dd',
            autoclose: true,
            todayHighlight: true
        });
    });
</script>
{% endblock %}


-----------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\forms.py:

from django import forms
from .models import Transaction, Category, Budget
from django.contrib.auth.models import User
import datetime
from django.contrib.auth.forms import UserCreationForm


class DateInput(forms.DateInput):
    input_type = 'date'

class TransactionForm(forms.ModelForm):
    class Meta:
        model = Transaction
        fields = ['type', 'category', 'amount', 'date', 'note']
        widgets = {
            'date': DateInput(),
            'note': forms.Textarea(attrs={'rows': 3, 'placeholder': 'Add any details about this transaction'}),
            'amount': forms.NumberInput(attrs={'step': '0.01', 'min': '0.01', 'placeholder': '0.00'}),
        }

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        
        if user:
            self.fields['category'].queryset = Category.objects.filter(user=user)
            self.fields['category'].empty_label = "-- Select Category --"
            
        # Add CSS classes and other attributes
        for field_name, field in self.fields.items():
            if field_name != 'type':  # We handle type separately with custom radio buttons
                field.widget.attrs['class'] = 'form-control'

class CategoryForm(forms.ModelForm):
    class Meta:
        model = Category
        fields = ['name', 'icon', 'color']
        widgets = {
            'icon': forms.TextInput(attrs={'placeholder': 'fa-tag', 'class': 'form-control'}),
            'color': forms.TextInput(attrs={'type': 'color', 'class': 'form-control form-control-color'}),
        }
        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['name'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': 'e.g. Groceries, Rent, Salary'
        })

class TransactionFilterForm(forms.Form):
    TYPE_CHOICES = [('', 'All Types')] + list(Transaction.TYPES)
    
    type = forms.ChoiceField(choices=TYPE_CHOICES, required=False, widget=forms.Select(attrs={'class': 'form-select'}))
    category = forms.ModelChoiceField(queryset=Category.objects.none(), required=False, empty_label="All Categories", 
                                     widget=forms.Select(attrs={'class': 'form-select'}))
    start_date = forms.DateField(required=False, widget=DateInput(attrs={'class': 'form-control', 'placeholder': 'Start Date'}))
    end_date = forms.DateField(required=False, widget=DateInput(attrs={'class': 'form-control', 'placeholder': 'End Date'}))
    min_amount = forms.DecimalField(required=False, widget=forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Min Amount'}))
    max_amount = forms.DecimalField(required=False, widget=forms.NumberInput(attrs={'class': 'form-control', 'placeholder': 'Max Amount'}))
    
    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        
        if user:
            self.fields['category'].queryset = Category.objects.filter(user=user)

class BudgetForm(forms.ModelForm):
    class Meta:
        model = Budget
        fields = ['category', 'amount', 'period', 'start_date', 'end_date']
        widgets = {
            'start_date': DateInput(),
            'end_date': DateInput(),
            'amount': forms.NumberInput(attrs={'step': '0.01', 'min': '0.01'}),
        }
        
    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', None)
        super().__init__(*args, **kwargs)
        
        if user:
            self.fields['category'].queryset = Category.objects.filter(user=user)
            self.fields['category'].empty_label = "Overall Budget (All Categories)"
            
        # Add CSS classes for Bootstrap styling
        for field_name, field in self.fields.items():
            field.widget.attrs['class'] = 'form-control'


class RegisterForm(UserCreationForm):
    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields.values():
            field.widget.attrs['class'] = 'form-control'

-----------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\models.py:


from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from django.db.models import Sum  # Moved to top for consistency

class Category(models.Model):
    name = models.CharField(max_length=50)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    icon = models.CharField(max_length=50, default="fa-tag")  # Store Font Awesome icon name
    color = models.CharField(max_length=20, default="#6c757d")  # Default color in HEX
    created_at = models.DateTimeField(default=timezone.now)  # FIXED: removed auto_now_add for migration

    class Meta:
        verbose_name_plural = "Categories"
        ordering = ['name']

    def __str__(self):
        return self.name
    
    def get_transaction_count(self):
        return self.transaction_set.count()
    
    def get_total_expenses(self):
        return self.transaction_set.filter(type='EX').aggregate(Sum('amount'))['amount__sum'] or 0


class Transaction(models.Model):
    INCOME = 'IN'
    EXPENSE = 'EX'
    TYPES = [(INCOME, 'Income'), (EXPENSE, 'Expense')]

    user = models.ForeignKey(User, on_delete=models.CASCADE)
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)
    type = models.CharField(max_length=2, choices=TYPES)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    date = models.DateField(default=timezone.now)
    note = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-date', '-created_at']

    def __str__(self):
        return f"{self.get_type_display()}: {self.amount} on {self.date}"
    
    def get_category_name(self):
        return self.category.name if self.category else "Uncategorized"
    
    @property
    def is_income(self):
        return self.type == self.INCOME
    
    @property
    def is_expense(self):
        return self.type == self.EXPENSE


class Budget(models.Model):
    PERIOD_CHOICES = [
        ('weekly', 'Weekly'),
        ('monthly', 'Monthly'),
        ('yearly', 'Yearly'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, null=True, blank=True)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    period = models.CharField(max_length=10, choices=PERIOD_CHOICES, default='monthly')
    start_date = models.DateField(default=timezone.now)
    end_date = models.DateField(null=True, blank=True)
    is_active = models.BooleanField(default=True)
    
    def __str__(self):
        category_name = self.category.name if self.category else "Overall"
        return f"{category_name} Budget: {self.amount} ({self.get_period_display()})"
    
    def get_spent_amount(self):
        if not self.is_active:
            return 0
            
        transactions = Transaction.objects.filter(
            user=self.user,
            type='EX',
            date__gte=self.start_date
        )
        
        if self.end_date:
            transactions = transactions.filter(date__lte=self.end_date)
        
        if self.category:
            transactions = transactions.filter(category=self.category)
            
        return transactions.aggregate(Sum('amount'))['amount__sum'] or 0
    
    def get_remaining(self):
        return self.amount - self.get_spent_amount()
    
    def get_percentage_used(self):
        if self.amount <= 0:
            return 100
        percentage = (self.get_spent_amount() / self.amount) * 100
        return min(percentage, 100)  # Cap at 100%

--------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\urls.py:


from django.urls import path
from . import views
from django.contrib.auth import views as auth_views


urlpatterns = [
    path('', views.dashboard, name='dashboard'),
    path('add/', views.add_transaction, name='add_transaction'),
    path('categories/', views.list_categories, name='list_categories'),
    path('categories/add/', views.add_category, name='add_category'),
    path('categories/delete/<int:category_id>/', views.delete_category, name='delete_category'),
    path('transactions/', views.TransactionListView.as_view(), name='list_transactions'),
    path('transactions/edit/<int:pk>/', views.edit_transaction, name='edit_transaction'),
    path('transactions/delete/<int:pk>/', views.delete_transaction, name='delete_transaction'),
    # path('budgets/', views.list_budgets, name='list_budgets'),  # If implementing budgets
    # path('login/', auth_views.LoginView.as_view(template_name='planner/login.html'), name='login'),
    # path('logout/', auth_views.LogoutView.as_view(next_page='login'), name='logout'),
]

urlpatterns += [
    path('login/', auth_views.LoginView.as_view(template_name='planner/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page='login'), name='logout'),
]

-----------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\views.py:

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy, reverse
from django.contrib import messages
from django.db.models import Sum, Count, Q
from django.utils import timezone
from django.http import JsonResponse
import json
import datetime
from calendar import monthrange
from django.contrib.auth import login
from .forms import RegisterForm


from .models import Transaction, Category, Budget
from .forms import TransactionForm, CategoryForm, TransactionFilterForm, BudgetForm

@login_required
def dashboard(request):
    today = timezone.now().date()
    first_day_of_month = today.replace(day=1)
    last_day_of_month = today.replace(day=monthrange(today.year, today.month)[1])
    
    # Get all transactions for the current month
    month_transactions = Transaction.objects.filter(
        user=request.user,
        date__gte=first_day_of_month,
        date__lte=last_day_of_month
    )
    
    # Calculate totals
    expenses = month_transactions.filter(type='EX')
    income = month_transactions.filter(type='IN')
    
    total_expense = expenses.aggregate(Sum('amount'))['amount__sum'] or 0
    total_income = income.aggregate(Sum('amount'))['amount__sum'] or 0
    balance = total_income - total_expense
    
    # Category expense breakdown
    category_data = expenses.values('category__name').annotate(total=Sum('amount')).order_by('-total')
    labels = [item['category__name'] or 'Uncategorized' for item in category_data]
    data = [float(item['total']) for item in category_data]
    
    # Recent transactions
    recent_transactions = Transaction.objects.filter(user=request.user).order_by('-date', '-created_at')[:5]
    
    return render(request, 'planner/dashboard.html', {
        'total_expense': total_expense,
        'total_income': total_income,
        'balance': balance,
        'labels': json.dumps(labels),
        'data': json.dumps(data),
        'recent_transactions': recent_transactions,
        'today': today,
        'month_name': today.strftime('%B'),
    })

@login_required
def add_transaction(request):
    if request.method == 'POST':
        form = TransactionForm(request.POST, user=request.user)
        if form.is_valid():
            transaction = form.save(commit=False)
            transaction.user = request.user
            transaction.save()
            messages.success(request, 'Transaction added successfully!')
            return redirect('dashboard')
    else:
        form = TransactionForm(user=request.user)
    
    return render(request, 'planner/add_transaction.html', {'form': form})

@login_required
def edit_transaction(request, transaction_id):
    transaction = get_object_or_404(Transaction, id=transaction_id, user=request.user)
    
    if request.method == 'POST':
        form = TransactionForm(request.POST, instance=transaction, user=request.user)
        if form.is_valid():
            form.save()
            messages.success(request, 'Transaction updated successfully!')
            return redirect('list_transactions')
    else:
        form = TransactionForm(instance=transaction, user=request.user)
    
    return render(request, 'planner/edit_transaction.html', {
        'form': form,
        'transaction': transaction
    })

@login_required
def delete_transaction(request, transaction_id):
    transaction = get_object_or_404(Transaction, id=transaction_id, user=request.user)
    transaction.delete()
    messages.success(request, 'Transaction deleted successfully!')
    return redirect('list_transactions')

class TransactionListView(LoginRequiredMixin, ListView):
    model = Transaction
    template_name = 'planner/transaction_list.html'
    context_object_name = 'transactions'
    paginate_by = 15
    
    def get_queryset(self):
        queryset = Transaction.objects.filter(user=self.request.user)
        
        # Apply filters from GET parameters
        transaction_type = self.request.GET.get('type')
        if transaction_type:
            queryset = queryset.filter(type=transaction_type)
            
        category_id = self.request.GET.get('category')
        if category_id:
            queryset = queryset.filter(category_id=category_id)
            
        start_date = self.request.GET.get('start_date')
        if start_date:
            queryset = queryset.filter(date__gte=start_date)
            
        end_date = self.request.GET.get('end_date')
        if end_date:
            queryset = queryset.filter(date__lte=end_date)
            
        min_amount = self.request.GET.get('min_amount')
        if min_amount:
            queryset = queryset.filter(amount__gte=min_amount)
            
        max_amount = self.request.GET.get('max_amount')
        if max_amount:
            queryset = queryset.filter(amount__lte=max_amount)
            
        search = self.request.GET.get('search')
        if search:
            queryset = queryset.filter(
                Q(note__icontains=search) | 
                Q(category__name__icontains=search)
            )
            
        return queryset.order_by('-date', '-created_at')
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.filter(user=self.request.user)
        return context


@login_required
def list_categories(request):
    categories = Category.objects.filter(user=request.user)
    return render(request, 'planner/categories.html', {'categories': categories})

@login_required
def add_category(request):
    if request.method == 'POST':
        form = CategoryForm(request.POST)
        if form.is_valid():
            category = form.save(commit=False)
            category.user = request.user
            category.save()
            return redirect('list_categories')
    else:
        form = CategoryForm()
    return render(request, 'planner/add_category.html', {'form': form})

@login_required
def delete_category(request, category_id):
    category = Category.objects.get(id=category_id, user=request.user)
    category.delete()
    return redirect('list_categories')
@login_required
def delete_category(request, category_id):
    category = get_object_or_404(Category, id=category_id, user=request.user)
    
    if request.method == 'POST':
        # Update transactions with this category to NULL
        Transaction.objects.filter(user=request.user, category=category).update(category=None)
        category.delete()
        messages.success(request, 'Category deleted successfully!')
        return redirect('list_categories')
    
    # For GET request, show confirmation page
    transaction_count = category.transaction_set.count()
    return render(request, 'planner/confirm_delete_category.html', {
        'category': category,
        'transaction_count': transaction_count
    })

def register(request):
    if request.user.is_authenticated:
        return redirect('dashboard')
    
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, "Registration successful. You are now logged in.")
            return redirect('dashboard')
    else:
        form = RegisterForm()
    
    return render(request, 'planner/register.html', {'form': form})

------------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\templates\planner\base.html:

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Budget Planner{% endblock %}</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{% url 'dashboard' %}">
                <i class="fas fa-wallet me-2"></i>Budget Planner
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    {% if user.is_authenticated %}
                        <li class="nav-item">
                            <a class="nav-link {% if request.resolver_match.url_name == 'dashboard' %}active{% endif %}" href="{% url 'dashboard' %}">
                                <i class="fas fa-chart-pie me-1"></i> Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link {% if request.resolver_match.url_name == 'add_transaction' %}active{% endif %}" href="{% url 'add_transaction' %}">
                                <i class="fas fa-plus-circle me-1"></i> Add Transaction
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link {% if 'categories' in request.path %}active{% endif %}" href="{% url 'list_categories' %}">
                                <i class="fas fa-tags me-1"></i> Categories
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link {% if request.resolver_match.url_name == 'list_transactions' %}active{% endif %}" href="{% url 'list_transactions' %}">
                                <i class="fas fa-list me-1"></i> Transactions
                            </a>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-user me-1"></i> {{ user.username }}
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="{% url 'logout' %}">Logout</a></li>
                            </ul>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'register' %}">Register</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'login' %}">Login</a>
                        </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container mt-4 mb-5">
        {% if messages %}
            {% for message in messages %}
                <div class="alert alert-{{ message.tags }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endif %}
        
        {% block content %}{% endblock %}
    </div>

    <!-- Footer -->
    <footer class="footer mt-auto py-3 bg-light">
        <div class="container text-center">
            <span class="text-muted">Budget Planner &copy; {% now "Y" %}</span>
        </div>
    </footer>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>

------------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\templates\planner\style.css:
/* Main styling */
body {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    background-color: #f8f9fa;
}

.container {
    flex: 1;
}

/* Dashboard cards */
.dashboard-card {
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
}

.dashboard-card:hover {
    transform: translateY(-5px);
}

.income-card {
    background: linear-gradient(to right, #28a745, #20c997);
    color: white;
}

.expense-card {
    background: linear-gradient(to right, #dc3545, #fd7e14);
    color: white;
}

.balance-card {
    background: linear-gradient(to right, #007bff, #17a2b8);
    color: white;
}

/* Transaction items */
.transaction-item {
    border-left: 4px solid #dee2e6;
    transition: all 0.2s ease;
}

.transaction-item:hover {
    background-color: #f1f3f5;
}

.transaction-item.income {
    border-left-color: #28a745;
}

.transaction-item.expense {
    border-left-color: #dc3545;
}

/* Category tags */
.category-tag {
    border-radius: 20px;
    padding: 5px 15px;
    background-color: #e9ecef;
    margin-right: 10px;
    display: inline-flex;
    align-items: center;
}

.category-badge {
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 0.8rem;
}

/* Charts */
.chart-container {
    position: relative;
    margin: auto;
    height: 300px;
    width: 100%;
}

/* Form styling */
.form-control:focus {
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

/* Custom button styles */
.btn-add {
    background-color: #20c997;
    border-color: #20c997;
    color: white;
}

.btn-add:hover {
    background-color: #1ba87e;
    border-color: #1ba87e;
    color: white;
}

/* Amount colors */
.amount-positive {
    color: #28a745;
    font-weight: 600;
}

.amount-negative {
    color: #dc3545;
    font-weight: 600;
}

/* Footer */
.footer {
    background-color: #f8f9fa;
    border-top: 1px solid #dee2e6;
    position: relative;
    bottom: 0;
    width: 100%;
}

/* Animation for elements */
.animate-in {
    animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
    0% { opacity: 0; transform: translateY(10px); }
    100% { opacity: 1; transform: translateY(0); }
}

/* Date range picker */
.date-filter {
    background: white;
    padding: 10px;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .chart-container {
        height: 250px;
    }
}

------------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\templates\planner\login.html:

{% extends 'planner/base.html' %}

{% block title %}Login - Budget Planner{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <h1 class="display-5 fw-bold mb-4 text-center">
            <i class="fas fa-sign-in-alt me-2"></i> Login
        </h1>
        <div class="card shadow-sm">
            <div class="card-body p-4">
                {% if form.errors %}
                <div class="alert alert-danger">⚠️ Invalid username or password.</div>
                {% endif %}
                <form method="post" class="needs-validation" novalidate>
                    {% csrf_token %}
                    <div class="mb-3">
                        <label for="id_username" class="form-label">Username</label>
                        <input type="text" name="username" class="form-control" required autofocus id="id_username">
                    </div>
                    <div class="mb-3">
                        <label for="id_password" class="form-label">Password</label>
                        <input type="password" name="password" class="form-control" required id="id_password">
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-sign-in-alt me-1"></i> Login
                        </button>
                    </div>
                </form>
                <p class="mt-3 text-center">
                    Don’t have an account? <a href="{% url 'register' %}">Register here</a>.
                </p>
            </div>
        </div>
    </div>
</div>
{% endblock %}

---------
C:\Users\muzak\OneDrive\Desktop\Mudassir\PROJ\budget_planner\planner\templates\planner\register.html:

{% extends 'planner/base.html' %}

{% block title %}Register - Budget Planner{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <h1 class="display-5 fw-bold mb-4 text-center">
            <i class="fas fa-user-plus me-2"></i> Register
        </h1>
        <div class="card shadow-sm">
            <div class="card-body p-4">
                <form method="post" class="needs-validation" novalidate>
                    {% csrf_token %}
                    {% for field in form %}
                    <div class="mb-3">
                        <label for="{{ field.id_for_label }}" class="form-label">{{ field.label }}</label>
                        {{ field }}
                        {% if field.errors %}
                        <div class="invalid-feedback d-block">{{ field.errors }}</div>
                        {% endif %}
                    </div>
                    {% endfor %}
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary btn-lg">
                            <i class="fas fa-user-plus me-1"></i> Create Account
                        </button>
                    </div>
                </form>
                <p class="mt-3 text-center">
                    Already have an account?
                    <a href="{% url 'admin:login' %}">Login</a>
                </p>
            </div>
        </div>
    </div>
</div>
{% endblock %}



